function preload() {

    game.load.baseURL = 'http://examples.phaser.io/assets/';
    game.load.crossOrigin = 'anonymous';

    game.load.image('phaser', 'sprites/phaser-dude.png');
    game.load.image('orb', 'sprites/orb-red.png');
    var wall = ['11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111'];
game.create.texture('wall',wall,6,6,0);
}








var triggers;
var walls;
var jump = -400;
var scoreText;
var score = 0;
var orb;
var arrows; 
var sprite;
var speed = 100;
function create() {
    scoreText = game.add.text(20,100,"score:"+score, {fill: "#FFFFFF",font:"16px Arial",align:"center"});
    game.stage.backgroundColor = "#FF0000";
    
    game.physics.startSystem(Phaser.Physics.Arcade);
    game.physics.arcade.gravity.y = 980;

    orb = game.add.sprite (600,180,'orb');
    orb.anchor.setTo(0.5, 0.5);
    game.physics.arcade.enable(orb);
    orb.body.allowGravity = false;
    
    sprite = game.add.sprite(400, 300, 'phaser');
    game.physics.arcade.enable(sprite);
    sprite.body.collideWorldBounds = true;
    arrows = game.input.keyboard.createCursorKeys();
    
    walls = game.add.group();
    walls.add(game.add.tileSprite(1050,0,100,300,'wall'));
    walls.add(game.add.tileSprite(1050,500,100,100,'wall'));
    walls.add(game.add.tileSprite(1400,0,100,100,'wall'));
    walls.add(game.add.tileSprite(1400,300,100,600,'wall'));
    walls.add(game.add.tileSprite(1750,0,100,100,'wall'));
    walls.add(game.add.tileSprite(1750,400,100,600,'wall'));
    game.physics.arcade.enable(walls);
    walls.setAll('body.allowGravity',false);
    walls.setAll('body.collideWorldBounds',false);
    triggers = game.add.group();
    triggers.add(game.add.sprite(1050,300,null));
    triggers.add(game.add.sprite(1400,100,null));
    triggers.add(game.add.sprite(1750,200,null));
    game.physics.arcade.enable(triggers);
    triggers.setAll('body.allowGravity',false);
    triggers.setAll('body.collideWorldBounds',false);
    triggers.forEach(giveSize);
    sprite.isCrossing = false;
}
function giveSize(item)
{
item.body.setSize(100,200);
}









var gameover = false;
var isCrossing = false;
function update()  
{
if(!gameover)
{
checkKeys();
    
animateOrb(orb,150);
game.physics.arcade.overlap (sprite,orb,miam,null,this);
walls.forEach(moveWalls);
triggers.forEach(moveWalls);
game.physics.arcade.collide(sprite,walls,paf);
game.physics.arcade.overlap(sprite,triggers,reset);
//var isCrossing = false;
//overlap
if(sprite.isCrossing && !isCrossing){
    score = score+1;
    isCrossing = true;
    sprite.isCrossing = false;
    scoreText.text = "score:"+score; 
}
if (!sprite.isCrossing) {
    isCrossing = false;
}
    
}
}

function miam(a,b)
{
    var newx = game.rnd.integerInRange(0,800);
    var newy = game.rnd.integerInRange(0,600);
    console.log("miam");
    b.reset(newx,newy);
    score = score + 1;
    scoreText.text = "score:"+score; 
    
}



function animateOrb (myOrb,speedOrb)
{
    myOrb.body.angularVelocity = speedOrb;
}

function checkKeys()
{
    //sprite.body.velocity.y = 0;
     if (arrows.up.downDuration(50)){
        sprite.body.velocity.y = jump;
    }
}

function moveWalls(item)
{  
    item.body.velocity.x =-400;

    if(item.x<=-100)
    {
        item.x = 1050;
    }
}
function paf (sprite,wall)
{

gameover = true;
game.physics.arcade.disable(sprite);
}
function reset (sprite, trigger)
{
   isCrossing = true;
   sprite.isCrossing = true

}














function render() {
    //game.debug.body(orb);
    //game.debug.body(sprite);
}
